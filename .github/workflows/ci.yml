name: CI/CD - Orders Service

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_test_and_deploy:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics check_port_connectivity"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Wait for RabbitMQ to be healthy
        run: |
          echo "Waiting for RabbitMQ..."
          until [ "$(docker inspect -f {{.State.Health.Status}} $(docker ps -q -f expose=5672))" == "healthy" ]; do
            sleep 5;
          done
          echo "RabbitMQ is ready âœ…"

      - name: Run Unit & Integration Tests
        run: npm test -- --runInBand

      - name: Run Lint
        run: npm run lint

      - name: Build Project
        run: npm run build

      - name: Docker Login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Create Docker tags
        id: vars
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_REPO }}:${{ env.VERSION }} -t ${{ secrets.DOCKERHUB_REPO }}:latest .

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_REPO }}:${{ env.VERSION }}
          docker push ${{ secrets.DOCKERHUB_REPO }}:latest
